#!/bin/sh
# vim: set ft=sh

set -e

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/common.sh

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp $TMPDIR/git-tag-resource-request.XXXXXX)

cat > $payload <&0

load_pubkey $payload
configure_git_ssl_verification $payload
configure_credentials $payload

uri=$(jq -r '.source.uri // ""' < $payload)
branch=$(jq -r '.source.branch // ""' < $payload)
git_config_payload=$(jq -r '.source.git_config // []' < $payload)
ref=$(jq -r '.params.ref // ""' < $payload)
ref_file=$(jq -r '.params.ref_file // ""' < $payload)
tag=$(jq -r '.params.tag // ""' < $payload)
tag_file=$(jq -r '.params.tag_file // ""' < $payload)
tag_prefix=$(jq -r '.params.tag_prefix // ""' < $payload)
force=$(jq -r '.params.force // false' < $payload)
annotation_file=$(jq -r '.params.annotate // ""' < $payload)

configure_git_global "${git_config_payload}"

if [ -z "$uri" ]; then
  echo "invalid payload (missing uri)"
  exit 1
fi

cd $source

if [ -n "$tag" ] && [ -n "$tag_file" ]; then
  echo "only specify 'tag' or 'tag_file'"
  exit 1
fi

if [ -n "$tag_file" ]; then 
  if [ ! -f "$tag_file" ]; then
    echo "tag file '$tag_file' does not exist"
    exit 1
  else
    tag=$(cat $tag_file)
  fi
fi

full_tag="${tag_prefix}${tag}"

if [ -n "$ref" ] && [ -n "$ref_file" ]; then
  echo "only specify 'ref' or 'ref_file'"
  exit 1
fi

if [ -n "$ref_file" ]; then
  if [ ! -f "$ref_file" ]; then
    echo "ref file '$ref_file' does not exist"
    exit 1
  else
    ref=$(cat $ref_file)
  fi
fi

forceflag=""
if [ $force = "true" ]; then
  forceflag="--force"
fi

annotate=""
if [ -n "$annotation_file" ]; then
  annotate=" -a -F $annotation_file"
fi

destination=$TMPDIR/git-tag-resource-repo-cache

if [ -d $destination ]; then
  cd $destination
  git fetch
  git reset --hard FETCH_HEAD
else
  git clone $uri $destination
  cd $destination
fi

tag() {
  if [ -n "$full_tag" ]; then
    git checkout $ref
    git tag -f $full_tag $annotate
  fi
}

push_tags() {
  git push --tags push-target $forceflag
}

git remote add push-target $uri

tag
push_tags

jq -n "{
  version: $(git tag --sort=creatordate --format='{ timestamp: "%(creatordate:unix)", tag: "%(refname:short)" }' | grep "tag: \"$full_tag\""),
  metadata: $(git_metadata)
}" >&3
